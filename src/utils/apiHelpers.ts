// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
export const getApiUrl = () => {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å /api –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Cloudflare Pages
  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Supabase –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
  // 1. window.APP_CONFIG?.API_URL - –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ
  // 2. import.meta.env.VITE_API_URL - –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vite
  // 3. /api - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  // 4. http://localhost:8788/api - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  
  return window.APP_CONFIG?.API_URL || 
         import.meta.env.VITE_API_URL || 
         (window.location.hostname === 'localhost' ? 'http://localhost:8788/api' : '/api');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å API —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export async function fetchWithFallback<T>(
  url: string, 
  fallbackData: T, 
  options: RequestInit = {}
): Promise<T> {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    const endpoint = url.split('/').slice(-2).join('/');
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${endpoint} (${options.method || 'GET'})`);
    
    // –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      controller.abort();
      console.error(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: ${endpoint}`);
    }, 10000);
    
    const response = await fetch(url, { 
      ...options, 
      signal: controller.signal 
    });
    
    clearTimeout(timeoutId);
    
    console.log(`üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} –¥–ª—è ${endpoint}`);
    
    if (!response.ok) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
      try {
        const errorDetails = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ API (${response.status}): ${errorDetails || '–ë–µ–∑ –¥–µ—Ç–∞–ª–µ–π'}`);
      } catch (detailsError) {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} (${response.statusText}) –¥–ª—è ${endpoint}`);
      }
    }
    
    const text = await response.text();
    
    if (text) {
      console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${endpoint} (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    } else {
      console.warn(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç ${endpoint}`);
    }
    
    try {
      return text ? JSON.parse(text) as T : fallbackData;
    } catch (parseError) {
      console.error(`üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç ${endpoint}:`, parseError);
      return fallbackData;
    }
  } catch (error) {
    const endpoint = url.split('/').pop() || url; // Get endpoint name for logging
    if (error instanceof Error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${endpoint}:`, error); // Log the full error object
      // Log specific messages based on error type
      if (error.message.includes('NetworkError') || error.message.includes('CORS')) {
         console.error('üîí –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ CORS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ URL —Ñ—É–Ω–∫—Ü–∏–∏.');
      } else if (error.name === 'AbortError') {
         console.error('‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.');
      } else {
         // Keep the fallback warning, but the main error is already logged above
         console.warn(`‚ö†Ô∏è [${endpoint}] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.`); 
      }
    } else {
      // Log if it's not a standard Error object
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${endpoint}:`, error);
      console.warn(`‚ö†Ô∏è [${endpoint}] –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏.`);
    }
    return fallbackData;
  }
}
