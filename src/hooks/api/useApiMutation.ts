import { useMutation, type UseMutationOptions, type UseMutationResult } from "@tanstack/react-query";
import { apiClient, type ApiRequestOptions } from "@/utils/apiClient";
import { useToast } from "@/hooks/use-toast";

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ö—É–∫–∞ useApiMutation
 */
interface UseApiMutationParams<TData = unknown, TVariables = unknown> {
  endpoint: string;
  method?: 'POST' | 'PUT' | 'DELETE';
  options?: Omit<ApiRequestOptions, 'method'>;
  mutationOptions?: Omit<UseMutationOptions<TData, Error, TVariables>, 'mutationFn'>;
  successMessage?: string;
  errorMessage?: string;
}

/**
 * –•—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º—É—Ç–∞—Ü–∏–π API (POST, PUT, DELETE) —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π React Query
 */
export function useApiMutation<TData = unknown, TVariables = unknown>({
  endpoint,
  method = 'POST',
  options = {},
  mutationOptions = {},
  successMessage,
  errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
}: UseApiMutationParams<TData, TVariables>): UseMutationResult<TData, Error, TVariables> {
  const { toast } = useToast();

  return useMutation<TData, Error, TVariables>({
    mutationFn: async (variables: TVariables) => {
      try {
        const operationName = method === 'POST' ? '—Å–æ–∑–¥–∞–Ω–∏—è' : method === 'PUT' ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' : '—É–¥–∞–ª–µ–Ω–∏—è';
        console.log(`üì§ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName} (${method} –∑–∞–ø—Ä–æ—Å –∫ ${endpoint})`);
        
        let result: TData;
        
        switch (method) {
          case 'POST':
            result = await apiClient.post<TData>(endpoint, variables, options);
            break;
          case 'PUT':
            result = await apiClient.put<TData>(endpoint, variables, options);
            break;
          case 'DELETE':
            result = await apiClient.delete<TData>(`${endpoint}${variables ? `/${variables}` : ''}`, options);
            break;
          default:
            result = await apiClient.post<TData>(endpoint, variables, options);
        }
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName}`);
        return result;
      } catch (error) {
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        if (error instanceof Error) {
          console.error(`üî¥ –û—à–∏–±–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}: ${error.message}`);
        } else {
          console.error(`üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}:`, error);
        }
        throw error;
      }
    },
    ...mutationOptions,
    onSuccess: (data, variables, context) => {
      if (successMessage) {
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: successMessage,
        });
      }
      
      if (mutationOptions.onSuccess) {
        mutationOptions.onSuccess(data, variables, context);
      }
    },
    onError: (error, variables, context) => {
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorDetails = error instanceof Error 
        ? error.message 
        : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
        
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ API",
        description: errorMessage || errorDetails || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É",
      });
      
      if (mutationOptions.onError) {
        mutationOptions.onError(error, variables, context);
      }
    }
  });
}
