import { useQuery, type UseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
import { apiClient, type ApiRequestOptions } from "@/utils/apiClient";
import { useToast } from "@/hooks/use-toast";

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ö—É–∫–∞ useApiQuery
 */
interface UseApiQueryParams<TData = unknown> {
  endpoint: string;
  enabled?: boolean;
  options?: Omit<ApiRequestOptions, 'method'>;
  queryOptions?: Omit<UseQueryOptions<TData, Error>, 'queryKey' | 'queryFn'>;
  queryKey?: string[];
  errorMessage?: string;
  showToast?: boolean;  // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
}

/**
 * –•—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π React Query
 */
export function useApiQuery<TData = unknown>({
  endpoint,
  enabled = true,
  options = {},
  queryOptions = {},
  queryKey,
  errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
  showToast = true,  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
}: UseApiQueryParams<TData>): UseQueryResult<TData, Error> {
  const { toast } = useToast();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  const finalQueryKey = queryKey || ['api', endpoint];
  
  return useQuery<TData, Error>({
    queryKey: finalQueryKey,
    queryFn: async () => {
      try {
        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        return await apiClient.get<TData>(endpoint, options);
      } catch (error) {
        // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        if (error instanceof Error) {
          console.error(`üî¥ –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –∫ ${endpoint}: ${error.message}`);
        } else {
          console.error(`üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ${endpoint}:`, error);
        }
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ React Query
      }
    },
    enabled,
    retry: 2,  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 10000),  // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    ...queryOptions,
  });
}
